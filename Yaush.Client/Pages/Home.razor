@page "/"
@using System.Text.Json
@using System.Text
@using System.Runtime.InteropServices.JavaScript
@using static System.Net.Mime.MediaTypeNames
@inject HttpClient Http

<PageTitle>Blue Kappa</PageTitle>
<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Width="100%" Class="d-flex justify-center mt-16" Elevation="0">
        <MudPaper Class="d-flex flex-column gap-4" Elevation="0">
            <MudPaper Class="pa-4 d-flex flex-row gap-2">
                <MudTextField @bind-Value="Url"
                @ref="mudTextField"
                Label="Your url here"
                Variant="Variant.Outlined"
                Immediate="true" />

                <MudIconButton OnClick="HandleShortenClick"
                Variant="Variant.Filled"
                Icon="@Icons.Material.Filled.Forward"
                Color="Color.Primary"
                Size="Size.Large"
                Disabled=@(string.IsNullOrEmpty(Url)) />
            </MudPaper>
            @(
                                WaitingForResponse switch
                                {
                                    UserState.ResponseReceived => (
                @<MudPaper Class="pa-4 d-flex flex-row gap-2">
                <MudTextField id="@ShortenedUrlInputId"
                              @bind-Value="ShortenedUrl"
                              ReadOnly="true"
                              Variant="Variant.Filled" />
                <MudIconButton OnClick="HandleCopyToClipboardClick"
                               Variant="Variant.Filled"
                               Icon="@Icons.Material.Filled.CopyAll"
                               Color="Color.Primary"
                               Size="Size.Large" />
            </MudPaper>),
                                    UserState.AwaitingResponse => (@<div class="d-flex flex-row justify-center mt-8">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>),
                                    _ => (@<div />)
                                }

                            )

        </MudPaper>
    </MudPaper>
</MudContainer>

@code
{
    private const string ShortenedUrlInputId = "shortened-url";

    public string Url { get; set; } = string.Empty;
    public string ShortenedUrl { get; set; } = string.Empty;

    private MudTextField<string> mudTextField = null!;

    private enum UserState
    {
        InputtingUrl,
        AwaitingResponse,
        ResponseReceived
    }

    private UserState WaitingForResponse = UserState.InputtingUrl;

    protected override async Task OnInitializedAsync()
    {
        if (OperatingSystem.IsBrowser())
        {
            await JSHost.ImportAsync("Home",
                    $"../Pages/Home.razor.js");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (mudTextField is not null)
        {
            await mudTextField.FocusAsync();
        }
    }

    private async Task HandleShortenClick()
    {
        if (string.IsNullOrEmpty(Url))
            return;

        await ShortenUrl(Url);
    }

    private void HandleCopyToClipboardClick()
    {
        Console.WriteLine("in HandleCopyToClipboardClick");
        ToClipboard(ShortenedUrl);
    }

    private async Task ShortenUrl(string url)
    {
        WaitingForResponse = UserState.AwaitingResponse;
        var requestJson = new StringContent(
            JsonSerializer.Serialize(new CreateShortenedLinkRequest() { Url = url }));
        var resp = await Http.PostAsync("/", requestJson);
        WaitingForResponse = UserState.ResponseReceived;

        if (resp is null || resp.IsSuccessStatusCode == false)
            return;

        using var responseStream = await resp.Content.ReadAsStreamAsync();
        var shortenedUrlResponse = JsonSerializer.Deserialize<ShortenUrlResponse>(responseStream);

        if (shortenedUrlResponse is null)
            return;

        ShortenedUrl = shortenedUrlResponse.ShortenedUrl;
    }

    public class CreateShortenedLinkRequest
    {
        public required string Url { get; set; }
    }

    public class ShortenUrlResponse
    {
        public string ShortenedUrl { get; set; } = string.Empty;
    }
}
